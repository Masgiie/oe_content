<?php

/**
 * @file
 * The OpenEuropa Content installation file.
 */

declare(strict_types = 1);

use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_install().
 */
function oe_content_install() {
  // Configure the RDF SKOS graphs.
  if (!\Drupal::service('config.installer')->isSyncing()) {
    \Drupal::service('oe_content.op_skos_setup')->setup();
  }
}

/**
 * Configuration base fields - the view is editable and its hidden by default.
 */
function oe_content_update_8001() {
  // Remove base fields from display.
  $base_fields = [
    'oe_content_short_title',
    'oe_content_navigation_title',
    'oe_content_content_owner',
    'oe_content_legacy_link',
  ];
  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager */
  $entity_definition_update_manager = \Drupal::service('entity.definition_update_manager');
  foreach ($base_fields as $base_field) {
    $field_definition = $entity_definition_update_manager->getFieldStorageDefinition($base_field, 'node');
    $field_definition->setDisplayConfigurable('view', TRUE);
    $field_definition->setDisplayOptions('view', []);
    $entity_definition_update_manager->updateFieldStorageDefinition($field_definition);
  }
}

/**
 * Update field storage with oe_reference.
 */
function oe_content_update_8002() {
  // Obtain configuration from yaml files.
  $storage = new FileStorage(drupal_get_path('module', 'oe_content') . '/config/install');

  // Obtain the storage manager for field storage bases,
  // Create a new field from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_storage_config')
    ->create($storage->read('field.storage.node.oe_reference'))
    ->save();
}
