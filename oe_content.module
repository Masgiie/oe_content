<?php

/**
 * @file
 * The OpenEuropa Content module.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\rdf_entity\Entity\Rdf;

/**
 * Implements hook_entity_base_field_info().
 */
function oe_content_entity_base_field_info(EntityTypeInterface $entity_type): array {
  // Add the "provenance_uri" field to the RDF entity type.
  if ($entity_type->id() !== 'rdf_entity') {
    return [];
  }

  $fields = [];

  $fields['provenance_uri'] = BaseFieldDefinition::create('uri')
    ->setLabel(t('Provenance URI'))
    ->setDescription(t('A URI that indicates the provenance of the entity.'))
    ->setTranslatable(FALSE);

  return $fields;
}

/**
 * Implements hook_entity_presave().
 */
function oe_content_entity_presave(EntityInterface $entity): void {
  // RDF entities need to be saved with a provenance URI.
  if (!$entity instanceof Rdf) {
    return;
  }

  $uri = \Drupal::config('oe_content.settings')->get('provenance_uri');
  if (!$uri) {
    throw new \Exception('The Provenance URI is not set.');
  }

  $entity->set('provenance_uri', $uri);
}

/**
 * Implements hook_rdf_apply_default_fields_alter().
 */
function oe_content_rdf_apply_default_fields_alter(string $type, array &$values): void {
  // Since the "full_html" is not guaranteed to exist, we default to plain_text
  // as the format for the text_long field type.
  if ($type == 'text_long') {
    foreach ($values as &$value) {
      if ($value['format'] == 'full_html') {
        $value['format'] = 'plain_text';
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function oe_content_rdf_entity_access(EntityInterface $entity, string $operation, AccountInterface $account): AccessResultInterface {
  if ($operation == 'view') {
    return AccessResult::neutral();
  }

  $provenance_uri = \Drupal::config('oe_content.settings')->get('provenance_uri');
  return $entity->get('provenance_uri')->value === $provenance_uri ? AccessResult::neutral() : AccessResult::forbidden();
}
