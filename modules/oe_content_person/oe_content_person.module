<?php

/**
 * @file
 * The OpenEuropa Person Content module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\oe_content\Utility\ContentFormUtilities;

/**
 * Implements hook_form_BASE_FORM_ID_alter for the node form.
 */
function oe_content_person_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getBuildInfo()['callback_object']->getEntity();

  if ($node->bundle() !== 'oe_person') {
    return;
  }

  ContentFormUtilities::toggleFieldByValue($form, 'oe_person_type', 'oe_departments', 'eu');
  ContentFormUtilities::toggleFieldByValue($form, 'oe_person_type', 'oe_person_organisation', 'non_eu');

  // Hide the title field as we auto-generate it based on the first and last
  // name.
  $form['title']['#access'] = FALSE;

  $form['oe_person_jobs']['#element_validate'][] = 'oe_content_person_oe_person_jobs_validate';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function oe_content_person_node_presave(EntityInterface $entity) {
  if ($entity->bundle() !== 'oe_person') {
    return;
  }

  // Clear out some values depending on the chosen person type.
  $type = $entity->get('oe_person_type')->value;

  if ($type === 'eu') {
    $entity->get('oe_person_organisation')->setValue(NULL);
  }
  else {
    $entity->get('oe_departments')->setValue(NULL);
  }

  // Set the node title based on some field values.
  $title = $entity->get('oe_person_first_name')->value . ' ' . $entity->get('oe_person_last_name')->value;
  if (!$entity->get('oe_person_displayed_name')->isEmpty()) {
    $title = $entity->get('oe_person_displayed_name')->value;
  }

  $entity->setTitle($title);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function oe_content_person_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] !== 'oe_person_job') {
    return;
  }

  // Set initial state when form is loaded. If field
  // "What type of person are you adding?" is not set then all fields will
  // be hidden.
  $type = NULL;
  $user_input = $form_state->getUserInput();
  if (isset($user_input['oe_person_type'])) {
    $type = $user_input['oe_person_type'];
  }
  if ($type !== 'eu') {
    $entity_form['oe_role_reference']['#attributes']['style'] = 'display:none';
    $entity_form['oe_acting']['#attributes']['style'] = 'display:none';
    $entity_form['oe_role_name']['widget'][0]['value']['#required'] = TRUE;
  }

  if ($type !== 'non_eu') {
    $entity_form['oe_role_name']['#attributes']['style'] = 'display:none';
    $entity_form['oe_role_reference']['widget'][0]['target_id']['#required'] = TRUE;
  }

  // Set states based on "What type of person are you adding?" field.
  ContentFormUtilities::toggleFieldByValue($entity_form, 'oe_person_type', 'oe_role_name', 'non_eu');
  ContentFormUtilities::toggleFieldByValue($entity_form, 'oe_person_type', 'oe_role_reference', 'eu');
  ContentFormUtilities::toggleFieldByValue($entity_form, 'oe_person_type', 'oe_acting', 'eu');

  $entity_form['oe_role_name']['widget'][0]['value']['#states']['required'] = [
    ':input[name="oe_person_type"]' => [
      'value' => 'non_eu',
    ],
  ];
  $entity_form['oe_role_reference']['widget'][0]['target_id']['#states']['required'] = [
    ':input[name="oe_person_type"]' => [
      'value' => 'eu',
    ],
  ];
}

/**
 * Validation callback for a "oe_person_jobs" element.
 *
 * @param array $element
 *   The element being processed.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $complete_form
 *   The complete form structure.
 */
function oe_content_person_oe_person_jobs_validate(array &$element, FormStateInterface $form_state, array &$complete_form): void {
  $type = $form_state->getValue(['oe_person_type', 0, 'value']);

  $field_values = $form_state->getValue(['oe_person_jobs', 'form', 'inline_entity_form', 'entities']);
  if (empty($field_values)) {
    // Inline entity form doesn't exist yet.
    return;
  }

  // Clear hidden fields. Otherwise these fields will be validated.
  $delta = key($field_values);
  if ($type !== 'non_eu') {
    $form_state->setValue(['oe_person_jobs', 'form', 'inline_entity_form', 'entities', $delta, 'form', 'oe_role_name'], []);
  }
  if ($type !== 'eu') {
    $form_state->setValue(['oe_person_jobs', 'form', 'inline_entity_form', 'entities', $delta, 'form', 'oe_role_reference'], []);
    $form_state->setValue(['oe_person_jobs', 'form', 'inline_entity_form', 'entities', $delta, 'form', 'oe_acting'], []);
  }
}
